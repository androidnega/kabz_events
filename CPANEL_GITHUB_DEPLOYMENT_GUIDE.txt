================================================================================
        KABZS EVENT - COMPLETE CPANEL DEPLOYMENT GUIDE VIA GITHUB
================================================================================

Last Updated: October 15, 2025
Platform: KABZS EVENT (Laravel 10)
Deployment: GitHub → cPanel
Difficulty: Intermediate

================================================================================
                        TABLE OF CONTENTS
================================================================================

PART 1: Pre-Deployment Preparation
PART 2: GitHub Repository Setup
PART 3: cPanel Initial Setup
PART 4: Deployment Method 1 - Git Version Control (Recommended)
PART 5: Deployment Method 2 - SSH/Terminal Deployment
PART 6: Deployment Method 3 - Manual FTP Upload
PART 7: Post-Deployment Configuration
PART 8: Database Setup
PART 9: Environment Configuration
PART 10: File Permissions & Security
PART 11: Laravel Optimization
PART 12: Testing & Verification
PART 13: Troubleshooting Common Issues
PART 14: Maintenance & Updates

================================================================================
                    PART 1: PRE-DEPLOYMENT PREPARATION
================================================================================

STEP 1.1: LOCAL PROJECT CLEANUP
--------------------------------
Before deploying, clean up your local project:

□ Remove unnecessary files:
  - Delete /node_modules folder
  - Delete /vendor folder (will be reinstalled on server)
  - Delete /storage/logs/*.log files
  - Clear /storage/framework/cache files

□ Update .gitignore file to include:
  /node_modules
  /public/hot
  /public/storage
  /storage/*.key
  /vendor
  .env
  .env.backup
  .phpunit.result.cache
  Homestead.json
  Homestead.yaml
  npm-debug.log
  yarn-error.log
  /.idea
  /.vscode

STEP 1.2: CREATE PRODUCTION .ENV TEMPLATE
------------------------------------------
□ Duplicate your .env file as .env.production.example
□ Remove all sensitive data (API keys, passwords)
□ Add placeholder comments for what needs to be filled

Example .env.production.example:
```
APP_NAME="KABZS EVENT"
APP_ENV=production
APP_KEY=                          # Generate with: php artisan key:generate
APP_DEBUG=false                   # MUST be false in production
APP_URL=https://yourdomain.com    # Your actual domain

LOG_CHANNEL=stack
LOG_LEVEL=error

DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=your_database_name    # Get from cPanel MySQL
DB_USERNAME=your_database_user    # Get from cPanel MySQL
DB_PASSWORD=your_database_pass    # Get from cPanel MySQL

# Add all other settings...
```

STEP 1.3: GATHER REQUIRED INFORMATION
--------------------------------------
□ cPanel login credentials (username & password)
□ cPanel URL (usually: yourdomain.com/cpanel or yourdomain.com:2083)
□ Domain name or subdomain for deployment
□ SSH access details (if available)
□ FTP credentials (backup method)

STEP 1.4: BACKUP CURRENT VERSION
---------------------------------
□ Create a local backup of your entire project
□ Export your local database (if has important data)
□ Document your current .env settings

================================================================================
                    PART 2: GITHUB REPOSITORY SETUP
================================================================================

STEP 2.1: CREATE GITHUB REPOSITORY (If Not Already Created)
------------------------------------------------------------

Option A: Using GitHub Website
1. Go to https://github.com
2. Click "+" icon → "New repository"
3. Repository name: kabzs-event (or your preferred name)
4. Choose: Private (recommended for production code)
5. Don't initialize with README (you already have files)
6. Click "Create repository"

Option B: Using Git Command Line
1. Open terminal in your project root (C:\xampp\htdocs\kabz)
2. Initialize git (if not already):
   git init

3. Add all files:
   git add .

4. Create initial commit:
   git commit -m "Initial commit: Complete KABZS EVENT platform ready for deployment"

5. Add remote repository:
   git remote add origin https://github.com/yourusername/kabzs-event.git

6. Push to GitHub:
   git branch -M main
   git push -u origin main

STEP 2.2: VERIFY GITHUB REPOSITORY
-----------------------------------
□ Visit your GitHub repository URL
□ Confirm all files are uploaded (except .env and ignored files)
□ Check that .gitignore is working properly
□ Verify README.md is visible

STEP 2.3: CREATE PRODUCTION BRANCH (Optional but Recommended)
--------------------------------------------------------------
1. Create a production branch:
   git checkout -b production

2. Push production branch:
   git push -u origin production

3. Use 'main' for development, 'production' for live server

STEP 2.4: GENERATE PERSONAL ACCESS TOKEN (For HTTPS Git)
---------------------------------------------------------
1. Go to GitHub → Settings → Developer settings
2. Personal access tokens → Tokens (classic)
3. Generate new token (classic)
4. Name: "cPanel Deployment - KABZS EVENT"
5. Select scopes: ✓ repo (all)
6. Generate token
7. COPY TOKEN IMMEDIATELY (won't be shown again)
8. Save in secure location (password manager)

================================================================================
                    PART 3: CPANEL INITIAL SETUP
================================================================================

STEP 3.1: LOGIN TO CPANEL
--------------------------
1. Navigate to: https://yourdomain.com:2083 or yourdomain.com/cpanel
2. Enter cPanel username and password
3. You should see the cPanel dashboard

STEP 3.2: CHECK PHP VERSION
----------------------------
1. Find "Select PHP Version" or "MultiPHP Manager" in cPanel
2. Select your domain
3. Choose PHP 8.1 or PHP 8.2 (Laravel 10 requirement)
4. Click "Apply"

Required PHP Extensions (Enable these):
✓ bcmath
✓ ctype
✓ curl
✓ dom
✓ fileinfo
✓ json
✓ mbstring
✓ openssl
✓ pcre
✓ pdo
✓ pdo_mysql
✓ tokenizer
✓ xml
✓ zip
✓ gd (for image processing)

STEP 3.3: ENABLE SSH ACCESS (If Not Already Enabled)
-----------------------------------------------------
1. Look for "SSH Access" or "Terminal" in cPanel
2. If available, click "Manage SSH Keys"
3. Generate key pair or upload your public key
4. Authorize the key
5. Note: Some shared hosting doesn't provide SSH - skip if unavailable

STEP 3.4: CREATE DATABASE
--------------------------
1. Find "MySQL Databases" in cPanel
2. Create new database:
   - Database name: kabzs_event_db (or your choice)
   - Click "Create Database"
   - Note: cPanel adds prefix (e.g., username_kabzs_event_db)

3. Create database user:
   - Username: kabzs_user (or your choice)
   - Generate strong password or create custom
   - SAVE PASSWORD SECURELY
   - Click "Create User"

4. Add user to database:
   - Select user and database
   - Grant ALL PRIVILEGES
   - Click "Add"

5. Note down:
   - Full database name (with prefix)
   - Full username (with prefix)
   - Password

STEP 3.5: VERIFY FILE MANAGER ACCESS
-------------------------------------
1. Click "File Manager" in cPanel
2. Navigate to public_html (or your domain's document root)
3. Familiarize yourself with the interface

================================================================================
          PART 4: METHOD 1 - GIT VERSION CONTROL (RECOMMENDED)
================================================================================

This is the BEST method - allows easy updates via git pull.

STEP 4.1: ACCESS CPANEL TERMINAL OR SSH
----------------------------------------

Option A: cPanel Terminal (If Available)
1. In cPanel, find "Terminal" or "Terminal (SSH)"
2. Click to open web-based terminal
3. You'll see a command prompt

Option B: SSH Client (PuTTY for Windows, Terminal for Mac/Linux)
1. Open SSH client
2. Connect: ssh username@yourdomain.com -p 22 (or custom port)
3. Enter password when prompted
4. You should see command prompt

STEP 4.2: NAVIGATE TO CORRECT DIRECTORY
----------------------------------------
1. List current location:
   pwd

2. Navigate to home directory:
   cd ~

3. List files:
   ls -la

4. You should see: public_html, etc, mail folders

IMPORTANT: Choose deployment location based on domain setup:

Option A: Main domain (yourdomain.com)
- Deploy to: ~/public_html/
- Public folder will be: ~/public_html/public

Option B: Subdomain (app.yourdomain.com)
- Deploy to: ~/app.yourdomain.com/ or ~/public_html/app/
- Check cPanel → Domains to see subdomain root

Option C: Subfolder outside public_html (RECOMMENDED for Laravel)
- Deploy to: ~/laravel/kabzs-event/
- Symlink public folder to public_html
- More secure (keeps code outside web root)

For this guide, we'll use Option C (most secure):

STEP 4.3: CREATE PROJECT DIRECTORY
-----------------------------------
1. Create Laravel apps directory:
   mkdir -p ~/laravel
   cd ~/laravel

2. Verify location:
   pwd
   (Should show: /home/username/laravel)

STEP 4.4: CLONE GITHUB REPOSITORY
----------------------------------
1. Clone your repository:
   git clone https://github.com/yourusername/kabzs-event.git

2. When prompted for password, use your Personal Access Token (not GitHub password)
   Username: your_github_username
   Password: ghp_xxxxxxxxxxxxxxxxxxxx (your token)

3. Navigate into project:
   cd kabzs-event

4. Verify files:
   ls -la

5. You should see: app, config, database, public, resources, routes, etc.

STEP 4.5: CHECKOUT PRODUCTION BRANCH (If Using)
------------------------------------------------
git checkout production

STEP 4.6: INSTALL COMPOSER DEPENDENCIES
----------------------------------------
1. Check if Composer is installed:
   composer --version

2. If not installed or old version, install Composer:
   cd ~
   curl -sS https://getcomposer.org/installer | php
   mkdir -p ~/bin
   mv composer.phar ~/bin/composer
   chmod +x ~/bin/composer
   echo 'export PATH="$HOME/bin:$PATH"' >> ~/.bashrc
   source ~/.bashrc

3. Navigate back to project:
   cd ~/laravel/kabzs-event

4. Install PHP dependencies:
   composer install --optimize-autoloader --no-dev

   Note: --no-dev excludes development packages
         This will take several minutes

5. If you get memory errors:
   php -d memory_limit=-1 /home/username/bin/composer install --optimize-autoloader --no-dev

STEP 4.7: SETUP ENVIRONMENT FILE
---------------------------------
1. Copy environment file:
   cp .env.production.example .env
   
   OR if you don't have .env.production.example:
   cp .env.example .env

2. Edit .env file:
   nano .env
   
   OR use cPanel File Manager (easier for beginners)

3. Update these critical settings:
   
   APP_NAME="KABZS EVENT"
   APP_ENV=production
   APP_DEBUG=false          # CRITICAL: Must be false
   APP_URL=https://yourdomain.com
   
   DB_CONNECTION=mysql
   DB_HOST=localhost        # Usually localhost
   DB_PORT=3306
   DB_DATABASE=username_kabzs_event_db    # Full name with prefix
   DB_USERNAME=username_kabzs_user        # Full name with prefix
   DB_PASSWORD=your_secure_password       # From Step 3.4
   
   # Leave APP_KEY empty for now - will generate next

4. Save file:
   - In nano: Ctrl+X, then Y, then Enter
   - In File Manager: Click Save

STEP 4.8: GENERATE APPLICATION KEY
-----------------------------------
php artisan key:generate

This will automatically update APP_KEY in .env file

STEP 4.9: CREATE SYMBOLIC LINK FOR PUBLIC FOLDER
-------------------------------------------------
This connects your Laravel public folder to the web-accessible directory.

Option A: Remove existing public_html and symlink (Clean install)
1. Backup existing public_html (if has content):
   mv ~/public_html ~/public_html_backup

2. Create symbolic link:
   ln -s ~/laravel/kabzs-event/public ~/public_html

Option B: Link to subdomain or subfolder
1. For subdomain (app.yourdomain.com):
   ln -s ~/laravel/kabzs-event/public ~/app.yourdomain.com

2. For subfolder (yourdomain.com/app):
   ln -s ~/laravel/kabzs-event/public ~/public_html/app

Option C: Keep existing public_html content and add Laravel
1. Create subfolder:
   ln -s ~/laravel/kabzs-event/public ~/public_html/kabzs

2. Access via: yourdomain.com/kabzs

Recommended: Option A for dedicated domain

STEP 4.10: CREATE STORAGE SYMLINK
----------------------------------
cd ~/laravel/kabzs-event
php artisan storage:link

This creates: public/storage → storage/app/public

STEP 4.11: SET FILE PERMISSIONS
--------------------------------
cd ~/laravel/kabzs-event

# Make storage and bootstrap/cache writable
chmod -R 775 storage
chmod -R 775 bootstrap/cache

# If above doesn't work, try:
chmod -R 777 storage
chmod -R 777 bootstrap/cache

# Set proper ownership (replace 'username' with your cPanel username)
chown -R username:username storage
chown -R username:username bootstrap/cache

STEP 4.12: RUN DATABASE MIGRATIONS
-----------------------------------
php artisan migrate --force

Note: --force flag is required in production environment

STEP 4.13: SEED DATABASE (Initial Data)
----------------------------------------
php artisan db:seed --force

This will create:
- Roles and permissions
- Categories
- System settings
- Default admin users

STEP 4.14: OPTIMIZE LARAVEL FOR PRODUCTION
-------------------------------------------
# Cache configuration
php artisan config:cache

# Cache routes
php artisan route:cache

# Cache views
php artisan view:cache

# Clear and cache everything
php artisan optimize

STEP 4.15: TEST THE DEPLOYMENT
-------------------------------
1. Open browser and visit: https://yourdomain.com
2. You should see the KABZS EVENT homepage
3. Try logging in with admin credentials
4. Check all major features

✅ DEPLOYMENT METHOD 1 COMPLETE!

================================================================================
            PART 5: METHOD 2 - SSH/TERMINAL DEPLOYMENT (ALTERNATIVE)
================================================================================

Use this if Git Version Control is not available on your hosting.

STEP 5.1: CREATE ZIP OF PROJECT
--------------------------------
On local computer:

1. Navigate to project folder: C:\xampp\htdocs\kabz

2. Delete these folders (will reinstall on server):
   - vendor
   - node_modules

3. Create ZIP file:
   - Windows: Right-click → Send to → Compressed folder
   - Name: kabzs-event.zip

STEP 5.2: UPLOAD VIA CPANEL FILE MANAGER
-----------------------------------------
1. Login to cPanel
2. Click "File Manager"
3. Navigate to desired location (e.g., ~/laravel/)
4. Click "Upload"
5. Select kabzs-event.zip
6. Wait for upload to complete (may take 10-30 minutes depending on size)

STEP 5.3: EXTRACT ZIP FILE
---------------------------
1. In File Manager, right-click kabzs-event.zip
2. Click "Extract"
3. Choose extraction path
4. Wait for extraction (may take a few minutes)
5. Delete the ZIP file after extraction

STEP 5.4: CONTINUE WITH STEPS 4.6 ONWARDS
------------------------------------------
Follow the same steps from Method 1 starting from Step 4.6:
- Install Composer dependencies
- Setup .env file
- Generate app key
- Create symlinks
- Set permissions
- Run migrations
- Optimize Laravel

================================================================================
            PART 6: METHOD 3 - MANUAL FTP UPLOAD (LAST RESORT)
================================================================================

Only use this if SSH/Terminal is not available.

STEP 6.1: PREPARE FTP CLIENT
-----------------------------
1. Download FileZilla (free FTP client): https://filezilla-project.org/
2. Install and open FileZilla

STEP 6.2: GET FTP CREDENTIALS FROM CPANEL
------------------------------------------
1. In cPanel, find "FTP Accounts"
2. Either use main account or create new FTP account
3. Note down:
   - FTP Server: ftp.yourdomain.com or yourdomain.com
   - Username: username@yourdomain.com
   - Password: your_ftp_password
   - Port: 21 (or 22 for SFTP)

STEP 6.3: CONNECT VIA FTP
--------------------------
1. In FileZilla:
   - Host: ftp.yourdomain.com
   - Username: your_ftp_username
   - Password: your_ftp_password
   - Port: 21
2. Click "Quickconnect"

STEP 6.4: UPLOAD FILES
-----------------------
⚠️ WARNING: FTP upload is VERY slow for Laravel projects (20,000+ files)

1. Navigate remote side to: /public_html/ or your target directory
2. Navigate local side to: C:\xampp\htdocs\kabz\
3. Select all files and folders EXCEPT:
   - vendor (will install on server)
   - node_modules (not needed on server)
   - .env (will create on server)
4. Right-click → Upload
5. Wait... (may take 1-4 hours depending on connection)

STEP 6.5: CREATE .ENV VIA CPANEL FILE MANAGER
----------------------------------------------
1. Go to cPanel → File Manager
2. Navigate to your project directory
3. Click "New File"
4. Name: .env
5. Right-click → Edit
6. Copy/paste your production environment settings
7. Save

STEP 6.6: INSTALL COMPOSER DEPENDENCIES VIA CPANEL
---------------------------------------------------
Unfortunately, this requires cPanel Terminal or SSH access.

If you don't have terminal access:
1. On local computer, run: composer install --no-dev
2. Upload the entire /vendor folder via FTP
3. This will take a very long time (20-60 minutes)

STEP 6.7: CONTINUE WITH REMAINING STEPS
----------------------------------------
You'll still need SSH/Terminal access for:
- php artisan key:generate
- php artisan migrate
- php artisan db:seed
- Setting proper permissions

If no SSH access: Contact hosting support to run these commands.

================================================================================
                PART 7: POST-DEPLOYMENT CONFIGURATION
================================================================================

STEP 7.1: CONFIGURE .HTACCESS (If Needed)
------------------------------------------
Laravel includes .htaccess in public folder, but verify it exists:

Location: ~/laravel/kabzs-event/public/.htaccess

Content should include:
```
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
```

STEP 7.2: CONFIGURE HTTPS/SSL
------------------------------
1. In cPanel, find "SSL/TLS Status" or "Let's Encrypt SSL"
2. Select your domain
3. Click "Run AutoSSL" or "Install Certificate"
4. Wait for SSL to be installed (5-10 minutes)
5. Update .env:
   APP_URL=https://yourdomain.com (with https)

6. Force HTTPS in Laravel (app/Providers/AppServiceProvider.php):
   In boot() method:
   if($this->app->environment('production')) {
       \URL::forceScheme('https');
   }

STEP 7.3: CONFIGURE CRON JOBS (Laravel Scheduler)
--------------------------------------------------
1. In cPanel, find "Cron Jobs"
2. Add new cron job:
   - Minute: *
   - Hour: *
   - Day: *
   - Month: *
   - Weekday: *
   - Command: /usr/local/bin/php /home/username/laravel/kabzs-event/artisan schedule:run >> /dev/null 2>&1

3. Alternative command (if above doesn't work):
   cd /home/username/laravel/kabzs-event && php artisan schedule:run >> /dev/null 2>&1

STEP 7.4: CONFIGURE QUEUE WORKER (If Using Queues)
---------------------------------------------------
1. In cPanel Terminal/SSH:
   cd ~/laravel/kabzs-event
   php artisan queue:work --daemon

2. For persistent queue worker, use Supervisor (if available)
3. Or run queue:work in background:
   nohup php artisan queue:work &

STEP 7.5: SETUP ERROR LOGGING
------------------------------
1. Verify log directory exists:
   mkdir -p ~/laravel/kabzs-event/storage/logs
   chmod 775 ~/laravel/kabzs-event/storage/logs

2. Check logs regularly:
   tail -f ~/laravel/kabzs-event/storage/logs/laravel.log

================================================================================
                        PART 8: DATABASE SETUP
================================================================================

STEP 8.1: VERIFY DATABASE CONNECTION
-------------------------------------
Test database connection:
php artisan tinker
>>> DB::connection()->getPdo();

If successful, you'll see PDO object details.
Type: exit

STEP 8.2: RUN MIGRATIONS
-------------------------
# Fresh installation
php artisan migrate --force

# If already has migrations and want to reset
php artisan migrate:fresh --force --seed

⚠️ WARNING: migrate:fresh will DROP all tables!

STEP 8.3: SEED DATABASE
------------------------
# Run all seeders
php artisan db:seed --force

# Run specific seeder
php artisan db:seed --class=RoleSeeder --force
php artisan db:seed --class=CategorySeeder --force

STEP 8.4: CREATE ADMIN ACCOUNTS
--------------------------------
Option A: Via Seeder (If not already seeded)
php artisan db:seed --class=DatabaseSeeder --force

Option B: Via artisan command (if you created one)
php artisan create:super-admin

Option C: Via Tinker
php artisan tinker
>>> $user = new App\Models\User();
>>> $user->name = "Super Admin";
>>> $user->email = "admin@yourdomain.com";
>>> $user->password = bcrypt('SecurePassword123!');
>>> $user->email_verified_at = now();
>>> $user->save();
>>> $user->assignRole('super_admin');
>>> exit

STEP 8.5: IMPORT GHANA LOCATIONS (If Not in Seeders)
-----------------------------------------------------
1. Upload ghana_locations.csv to server
2. In cPanel or via SSH:
   cd ~/laravel/kabzs-event
   php artisan db:seed --class=GhanaLocationsSeeder --force

Or use the CSV import feature in Super Admin dashboard.

STEP 8.6: BACKUP DATABASE
--------------------------
Create initial backup after setup:

mysqldump -u username_kabzs_user -p username_kabzs_event_db > kabzs_backup_$(date +%Y%m%d).sql

Enter password when prompted.

================================================================================
                    PART 9: ENVIRONMENT CONFIGURATION
================================================================================

STEP 9.1: PRODUCTION .ENV CONFIGURATION
----------------------------------------
Edit: ~/laravel/kabzs-event/.env

CRITICAL SETTINGS:
```
# Application
APP_NAME="KABZS EVENT"
APP_ENV=production                    # MUST be production
APP_KEY=base64:xxxxx                  # Generated
APP_DEBUG=false                       # MUST be false in production
APP_URL=https://yourdomain.com        # Your actual domain with https

# Logging
LOG_CHANNEL=stack
LOG_LEVEL=error                       # Only log errors in production

# Database
DB_CONNECTION=mysql
DB_HOST=localhost                     # Usually localhost in cPanel
DB_PORT=3306
DB_DATABASE=username_kabzs_event_db
DB_USERNAME=username_kabzs_user
DB_PASSWORD=your_secure_password

# Cache & Session
CACHE_DRIVER=file                     # Or redis if available
SESSION_DRIVER=file                   # Or redis if available
SESSION_LIFETIME=120
QUEUE_CONNECTION=database             # Or redis if available

# Mail Configuration (SMTP)
MAIL_MAILER=smtp
MAIL_HOST=mail.yourdomain.com         # From cPanel
MAIL_PORT=465                         # 465 for SSL, 587 for TLS
MAIL_USERNAME=noreply@yourdomain.com  # Create in cPanel
MAIL_PASSWORD=your_email_password
MAIL_ENCRYPTION=ssl                   # ssl or tls
MAIL_FROM_ADDRESS=noreply@yourdomain.com
MAIL_FROM_NAME="${APP_NAME}"

# Arkassel SMS (Ghana)
SMS_PROVIDER=arkasel
SMS_API_KEY=                          # Get from Arkassel
SMS_API_SECRET=                       # Get from Arkassel
SMS_SENDER_ID=KABZS                   # Max 11 chars
SMS_ENABLED=true

# Paystack (Ghana)
PAYSTACK_PUBLIC_KEY=                  # Get from Paystack
PAYSTACK_SECRET_KEY=                  # Get from Paystack
PAYSTACK_CALLBACK_URL=https://yourdomain.com/payment/callback

# Cloudinary (Optional)
CLOUD_STORAGE=cloudinary              # or local
CLOUDINARY_CLOUD_NAME=                # Get from Cloudinary
CLOUDINARY_API_KEY=                   # Get from Cloudinary
CLOUDINARY_API_SECRET=                # Get from Cloudinary

# Broadcasting (Optional - for real-time features)
BROADCAST_DRIVER=pusher               # If using Pusher
PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

# Timezone
APP_TIMEZONE=Africa/Accra             # Ghana timezone
```

STEP 9.2: VERIFY ENVIRONMENT
-----------------------------
php artisan config:show

This will display all configuration values.

STEP 9.3: CLEAR ALL CACHES
---------------------------
php artisan config:clear
php artisan cache:clear
php artisan view:clear
php artisan route:clear

STEP 9.4: RECACHE FOR PRODUCTION
---------------------------------
php artisan config:cache
php artisan route:cache
php artisan view:cache

================================================================================
                PART 10: FILE PERMISSIONS & SECURITY
================================================================================

STEP 10.1: SET CORRECT FILE PERMISSIONS
----------------------------------------
cd ~/laravel/kabzs-event

# Directories: 755
find . -type d -exec chmod 755 {} \;

# Files: 644
find . -type f -exec chmod 644 {} \;

# Storage & Bootstrap cache: 775 (or 777 if 775 doesn't work)
chmod -R 775 storage
chmod -R 775 bootstrap/cache

# Make artisan executable
chmod +x artisan

STEP 10.2: SET CORRECT OWNERSHIP
---------------------------------
# Replace 'username' with your cPanel username
chown -R username:username ~/laravel/kabzs-event

# Specifically for storage
chown -R username:username storage
chown -R username:username bootstrap/cache

STEP 10.3: PROTECT SENSITIVE FILES
-----------------------------------
# .env should not be web-accessible (should be outside public_html anyway)
chmod 600 .env

# Protect other sensitive files
chmod 600 .env.example
chmod 600 composer.json
chmod 600 composer.lock
chmod 600 package.json

STEP 10.4: DISABLE DIRECTORY LISTING
-------------------------------------
Ensure .htaccess in public folder has:
Options -Indexes

STEP 10.5: SECURITY HEADERS (Optional)
---------------------------------------
Add to public/.htaccess:
```
# Security Headers
<IfModule mod_headers.c>
    Header set X-Content-Type-Options "nosniff"
    Header set X-Frame-Options "SAMEORIGIN"
    Header set X-XSS-Protection "1; mode=block"
    Header set Referrer-Policy "strict-origin-when-cross-origin"
</IfModule>
```

================================================================================
                    PART 11: LARAVEL OPTIMIZATION
================================================================================

STEP 11.1: PRODUCTION OPTIMIZATION
-----------------------------------
cd ~/laravel/kabzs-event

# Optimize autoloader
composer install --optimize-autoloader --no-dev

# Cache everything
php artisan optimize

# Specifically cache:
php artisan config:cache
php artisan route:cache
php artisan view:cache
php artisan event:cache

STEP 11.2: ENABLE OPCACHE (PHP)
--------------------------------
1. In cPanel → Select PHP Version
2. Enable extensions:
   ✓ opcache
   ✓ Zend OPcache

3. Or contact hosting support to enable

STEP 11.3: OPTIMIZE DATABASE
-----------------------------
# Optimize tables
php artisan db:optimize

# Or via SQL:
mysql -u username -p
USE username_kabzs_event_db;
OPTIMIZE TABLE users, vendors, services;

STEP 11.4: ASSET OPTIMIZATION
------------------------------
# If you need to build assets on server
npm install
npm run build

# Or build locally and upload public/build folder

STEP 11.5: CONFIGURE REDIS (If Available)
------------------------------------------
If your hosting supports Redis:

1. Update .env:
   CACHE_DRIVER=redis
   SESSION_DRIVER=redis
   QUEUE_CONNECTION=redis
   
   REDIS_HOST=127.0.0.1
   REDIS_PASSWORD=null
   REDIS_PORT=6379

2. Clear and recache:
   php artisan cache:clear
   php artisan config:cache

================================================================================
                    PART 12: TESTING & VERIFICATION
================================================================================

STEP 12.1: BASIC FUNCTIONALITY TESTS
-------------------------------------
□ Visit homepage: https://yourdomain.com
  - Should load without errors
  - Check for styling issues
  - Verify images load

□ Test authentication:
  - Go to /login
  - Try logging in with admin credentials
  - Verify redirect to appropriate dashboard

□ Test vendor features:
  - Login as vendor
  - View dashboard
  - Create/edit service
  - Upload sample work

□ Test admin features:
  - Login as admin
  - View admin dashboard
  - Check vendor management
  - Test verification workflow

□ Test super admin features:
  - Login as super admin
  - Access settings
  - Test configuration pages
  - Check backup system

STEP 12.2: DATABASE VERIFICATION
---------------------------------
# Check migrations
php artisan migrate:status

# Verify tables exist
mysql -u username -p
SHOW TABLES FROM username_kabzs_event_db;

# Check admin user exists
SELECT * FROM users WHERE email = 'admin@yourdomain.com';

STEP 12.3: FILE SYSTEM VERIFICATION
------------------------------------
□ Check storage is writable:
  - Try uploading vendor profile image
  - Try uploading sample work
  - Check if files appear in storage/app/public

□ Verify symlink works:
  - Upload image
  - Access via /storage/xxx.jpg URL
  - Should display image

STEP 12.4: ERROR LOG MONITORING
--------------------------------
# Watch logs in real-time
tail -f storage/logs/laravel.log

# Check for errors
cat storage/logs/laravel.log | grep ERROR

STEP 12.5: PERFORMANCE TEST
----------------------------
□ Page load time (should be < 2 seconds)
□ Database queries (check for N+1 problems)
□ Image loading
□ Search functionality
□ Real-time features (if applicable)

STEP 12.6: SECURITY VERIFICATION
---------------------------------
□ APP_DEBUG=false (check error pages show generic message)
□ .env file not web-accessible
□ Directory listing disabled
□ HTTPS working correctly
□ No sensitive data exposed in source code
□ SQL injection protection (try in search)
□ XSS protection (try in forms)

================================================================================
                PART 13: TROUBLESHOOTING COMMON ISSUES
================================================================================

ISSUE 1: "500 Internal Server Error"
-------------------------------------
Solutions:
1. Check error logs:
   tail -100 storage/logs/laravel.log
   
2. Check Apache error logs (in cPanel → Error Logs)

3. Verify file permissions:
   chmod -R 775 storage
   chmod -R 775 bootstrap/cache

4. Clear all caches:
   php artisan cache:clear
   php artisan config:clear
   php artisan view:clear

5. Regenerate app key:
   php artisan key:generate

6. Check .htaccess exists in public folder

ISSUE 2: "404 Not Found" for all pages except homepage
-------------------------------------------------------
Solutions:
1. Enable mod_rewrite:
   - Contact hosting support
   - Or check cPanel → Apache Modules

2. Check .htaccess file exists in public folder

3. Verify RewriteEngine On in .htaccess

ISSUE 3: Database Connection Failed
------------------------------------
Solutions:
1. Verify credentials in .env
2. Check database name includes cPanel prefix
3. Test connection:
   php artisan tinker
   >>> DB::connection()->getPdo();

4. Check MySQL is running (cPanel → phpMyAdmin)

5. Verify DB_HOST=localhost (not 127.0.0.1)

ISSUE 4: "Class not found" errors
----------------------------------
Solutions:
1. Regenerate autoloader:
   composer dump-autoload

2. Clear and recache:
   php artisan cache:clear
   php artisan config:cache
   php artisan optimize

3. Reinstall vendor:
   rm -rf vendor
   composer install --no-dev

ISSUE 5: Storage symlink not working
-------------------------------------
Solutions:
1. Remove existing symlink:
   rm public/storage

2. Recreate:
   php artisan storage:link

3. Verify permissions:
   chmod 777 storage/app/public

4. Check symlink exists:
   ls -la public/
   (Should show: storage -> ../storage/app/public)

ISSUE 6: CSS/JS not loading
----------------------------
Solutions:
1. Check APP_URL in .env matches your domain

2. Verify public folder is web root

3. Build assets:
   npm install
   npm run build

4. Check mixed content (HTTP vs HTTPS)

5. Clear browser cache

ISSUE 7: Permission Denied errors
----------------------------------
Solutions:
1. Set ownership:
   chown -R username:username ~/laravel/kabzs-event

2. Set permissions:
   chmod -R 775 storage
   chmod -R 775 bootstrap/cache

3. Add web server user to group (contact host support)

ISSUE 8: Composer memory limit
-------------------------------
Solutions:
1. Increase memory:
   php -d memory_limit=-1 /usr/bin/composer install

2. Or edit php.ini:
   memory_limit = 512M

3. Install dependencies locally and upload vendor folder

ISSUE 9: Migration failed
--------------------------
Solutions:
1. Check database credentials

2. Run migrations with verbose:
   php artisan migrate --force -vvv

3. Reset migrations:
   php artisan migrate:fresh --force --seed

4. Check table doesn't already exist

ISSUE 10: "SQLSTATE[HY000] [2002] Connection refused"
------------------------------------------------------
Solutions:
1. Change DB_HOST=localhost (not 127.0.0.1)

2. Try DB_HOST with socket:
   DB_HOST=localhost:/path/to/mysql.sock

3. Contact hosting support for correct DB_HOST

================================================================================
                    PART 14: MAINTENANCE & UPDATES
================================================================================

STEP 14.1: UPDATING FROM GITHUB (Method 1 Users)
-------------------------------------------------
If you deployed via Git (Method 1):

1. SSH into server:
   ssh username@yourdomain.com

2. Navigate to project:
   cd ~/laravel/kabzs-event

3. Pull latest changes:
   git pull origin production
   (or: git pull origin main)

4. Update dependencies:
   composer install --optimize-autoloader --no-dev

5. Run migrations (if any new):
   php artisan migrate --force

6. Clear and recache:
   php artisan cache:clear
   php artisan config:cache
   php artisan route:cache
   php artisan view:cache

7. Test the site

STEP 14.2: REGULAR MAINTENANCE TASKS
-------------------------------------
Daily:
□ Check error logs
□ Monitor disk space
□ Check uptime

Weekly:
□ Review error logs in detail
□ Check database size
□ Test critical features
□ Review security logs
□ Check backup system working

Monthly:
□ Update Laravel dependencies (if needed)
□ Security audit
□ Performance optimization
□ Database cleanup
□ Review and archive old logs

STEP 14.3: DATABASE BACKUPS
----------------------------
Manual backup:
cd ~
mysqldump -u username_kabzs_user -p username_kabzs_event_db > backup_$(date +%Y%m%d_%H%M%S).sql

Automated backup (cron job):
0 2 * * * mysqldump -u username_kabzs_user -pYourPassword username_kabzs_event_db > /home/username/backups/db_$(date +\%Y\%m\%d).sql

Or use built-in backup system:
php artisan backup:create

STEP 14.4: MONITORING
---------------------
Set up monitoring:
1. Uptime monitoring (e.g., UptimeRobot)
2. Error tracking (e.g., Sentry, Bugsnag)
3. Performance monitoring (e.g., New Relic)
4. Log aggregation (e.g., Papertrail)

STEP 14.5: SECURITY UPDATES
----------------------------
Keep updated:
□ Laravel framework
□ Composer packages
□ PHP version
□ MySQL version
□ SSL certificate
□ Server software

Check for updates:
composer outdated
composer update --dry-run

STEP 14.6: LARAVEL VERSION UPDATES
-----------------------------------
When updating Laravel:

1. Review upgrade guide: https://laravel.com/docs/10.x/upgrade

2. Create backup first

3. Update composer.json

4. Run: composer update

5. Test thoroughly on staging before production

================================================================================
                        DEPLOYMENT CHECKLIST
================================================================================

PRE-DEPLOYMENT:
□ Local project cleaned (vendor, node_modules removed)
□ .gitignore properly configured
□ GitHub repository created and pushed
□ Personal Access Token generated
□ cPanel login credentials obtained
□ Domain/subdomain configured

CPANEL SETUP:
□ PHP 8.1+ selected and extensions enabled
□ Database created with user and privileges
□ SSH access verified (if available)
□ SSL certificate installed

DEPLOYMENT:
□ Project deployed via Git/Upload
□ Composer dependencies installed
□ .env file created and configured
□ Application key generated
□ Storage symlink created
□ File permissions set (775 storage, bootstrap/cache)
□ Migrations run successfully
□ Database seeded
□ Admin account created

CONFIGURATION:
□ .htaccess verified
□ HTTPS/SSL configured
□ Cron jobs set up
□ Error logging configured
□ Paystack configured
□ Arkassel SMS configured
□ Cloudinary configured (if using)
□ Email (SMTP) configured

OPTIMIZATION:
□ Config cached
□ Routes cached
□ Views cached
□ Composer optimized
□ OPcache enabled

TESTING:
□ Homepage loads
□ Authentication works
□ All dashboards accessible
□ CRUD operations work
□ File uploads work
□ Search functionality works
□ Payments work (test mode first)
□ SMS works (test mode first)
□ No errors in logs

SECURITY:
□ APP_DEBUG=false
□ .env not web-accessible
□ Strong passwords set
□ Directory listing disabled
□ HTTPS enforced
□ Security headers added

POST-DEPLOYMENT:
□ Monitoring set up
□ Backup system configured
□ Documentation updated
□ Team notified
□ DNS propagated (if new domain)

================================================================================
                        QUICK REFERENCE COMMANDS
================================================================================

NAVIGATION:
cd ~                              # Home directory
cd ~/laravel/kabzs-event         # Project directory
pwd                              # Print working directory
ls -la                           # List all files

GIT:
git clone URL                    # Clone repository
git pull origin main             # Pull latest changes
git status                       # Check status
git log                          # View commit history

COMPOSER:
composer install --no-dev        # Install production dependencies
composer update                  # Update packages
composer dump-autoload           # Regenerate autoloader

ARTISAN:
php artisan key:generate         # Generate app key
php artisan migrate --force      # Run migrations
php artisan db:seed --force      # Seed database
php artisan storage:link         # Create storage symlink
php artisan optimize             # Optimize everything
php artisan cache:clear          # Clear cache
php artisan config:cache         # Cache config
php artisan route:cache          # Cache routes
php artisan view:cache           # Cache views

PERMISSIONS:
chmod -R 775 storage             # Set directory permissions
chmod 644 filename               # Set file permissions
chown -R user:user directory     # Set ownership

DATABASE:
mysql -u username -p             # Login to MySQL
mysqldump -u user -p db > file   # Backup database
mysql -u user -p db < file       # Restore database

LOGS:
tail -f storage/logs/laravel.log # Watch logs in real-time
tail -100 storage/logs/laravel.log # View last 100 lines
cat storage/logs/laravel.log | grep ERROR # Find errors

FILE OPERATIONS:
cp source destination            # Copy
mv source destination            # Move/Rename
rm filename                      # Delete file
rm -rf directory                 # Delete directory
nano filename                    # Edit file
cat filename                     # View file contents

SYMLINKS:
ln -s source destination         # Create symbolic link
ls -la                          # View symlinks
unlink linkname                 # Remove symlink

================================================================================
                        SUPPORT & RESOURCES
================================================================================

DOCUMENTATION:
- Laravel 10 Docs: https://laravel.com/docs/10.x
- cPanel Docs: https://docs.cpanel.net/
- Composer Docs: https://getcomposer.org/doc/

HELPFUL COMMUNITIES:
- Laravel Forum: https://laracasts.com/discuss
- Stack Overflow: https://stackoverflow.com/questions/tagged/laravel
- Laravel Discord: https://discord.gg/laravel

HOSTING SUPPORT:
- Contact your hosting provider for:
  - SSH access issues
  - PHP configuration
  - Database connection problems
  - SSL installation help

PROJECT SPECIFIC:
- All documentation in: /Docs folder
- Credentials: LOGIN_CREDENTIALS.txt
- Audit Report: SYSTEM_AUDIT_REPORT.txt

================================================================================
                        CONGRATULATIONS!
================================================================================

You have successfully deployed KABZS EVENT to your cPanel hosting!

Your Ghanaian event marketplace is now live and ready to connect vendors
with clients across Ghana.

Remember to:
✓ Change all default passwords
✓ Set up regular backups
✓ Monitor logs and performance
✓ Keep system updated
✓ Test all features thoroughly

Good luck with your platform! 🇬🇭🎉

================================================================================
                        END OF DEPLOYMENT GUIDE
================================================================================

Created: October 15, 2025
Version: 1.0
Platform: KABZS EVENT (Laravel 10)

For updates to this guide or additional help, refer to the project documentation
in the /Docs folder or contact your development team.

